import os
import zipfile
from datetime import datetime
import logging
from zipfile import ZipFile

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
import re
from aiogram.types import ContentType
import shutil

from app.handlers.general import cmd_idle
from app.scrapers.lenta import parse_lenta
from app.scrapers.maxidom import parse_maxidom
from app.scrapers.poryadok import parse_poryadok
from app.scrapers.ulybka import parse_ulybka
from app.tools.clean_output import cleaner

logger = logging.getLogger(__name__)


class UserChoice(StatesGroup):
    waiting_for_store = State()
    waiting_for_link = State()

async def inquiry_start(message: types.Message, state: FSMContext):
    buttons = [["–õ–µ–Ω—Ç–∞"],
               # ["Hoff"],
               ["–ú–∞–∫—Å–∏–¥–æ–º"],
               ["–ü–æ—Ä—è–¥–æ–∫"],
               ['–£–ª—ã–±–∫–∞ —Ä–∞–¥—É–≥–∏']]
    keyboard = types.ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
    await message.answer("–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã–±–µ—Ä–∏ –º–∞–≥–∞–∑–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ", reply_markup=keyboard)
    await UserChoice.waiting_for_store.set()

async def store_choice(message: types.Message, state: FSMContext):
    if message.content_type != ContentType.TEXT or message.text not in ['–õ–µ–Ω—Ç–∞', 'Hoff', '–ú–∞–∫—Å–∏–¥–æ–º', '–ü–æ—Ä—è–¥–æ–∫', '–£–ª—ã–±–∫–∞ —Ä–∞–¥—É–≥–∏']:
        await message.answer("–û—à–∏–±–æ—á–∫–∞\\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –º–∞–≥–∞–∑–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ")
        return None

    chosen_store = message.text
    await state.update_data(chosen_store=chosen_store)

    link_text = "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞–∑–¥–µ–ª –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ\n\n–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤–≤–æ–¥–∞:\n" \
                "https://lenta.com/catalog/bytovaya-himiya/sredstva-dlya-mytya-posudy/\n" \
                "https://www.r-ulybka.ru/u-catalog/vsye-dlya-doma/dlya-aromatizatsii/osvezhiteli-vozdukha/\n" \
                "https://www.maxidom.ru/catalog/osvezhiteli-vozduha/\n" \
                "https://spb.poryadok.ru/catalog/osvezhiteli_vozdukha/"
    await message.answer(link_text)

    await UserChoice.waiting_for_link.set()


async def link_set(message: types.Message, state: FSMContext):
    link_pattern = re.compile('(http|https):\/\/([\w_-]+(?:(?:\.[\w_-]+)+))([\w.,@?^=%&:\/~+#-]*[\w@?^=%&\/~+#-])')
    if message.content_type != ContentType.TEXT:
        await message.answer("–û—à–∏–±–∫–∞ üôÜ‚Äç‚ôÇÔ∏è\n\n–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ —Å—Å—ã–ª–∫—É\\.")
        return None
    else:
        link = message.text
        await state.update_data(link=link)
        waiting_text = "–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É.\n–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è " \
                       "–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.\n\n" \
                       "–í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –±–æ—Ç –æ—Ç–ø–∏—à–µ—Ç—Å—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö. " \
                       "–ê –ø–æ–∫–∞ —Ä–æ–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –º–æ–∂–Ω–æ –≤—ã–ø–∏—Ç—å —á–∞—é ‚òï –∏–ª–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –±–ª–∏–∑–∫–∏–º –æ —Å–≤–æ–µ–π –ª—é–±–≤–∏! ‚ù§Ô∏è"
        await message.answer(waiting_text)

    user_data = await state.get_data()
    try:
        if user_data['chosen_store'] == '–õ–µ–Ω—Ç–∞':
            result = parse_lenta(user_data['link'], message.from_user.id)
        elif user_data['chosen_store'] == '–ú–∞–∫—Å–∏–¥–æ–º':
            result = parse_maxidom(user_data['link'], message.from_user.id)
        elif user_data['chosen_store'] == '–ü–æ—Ä—è–¥–æ–∫':
            result = parse_poryadok(user_data['link'], message.from_user.id)
        elif user_data['chosen_store'] == '–£–ª—ã–±–∫–∞ —Ä–∞–¥—É–≥–∏':
            result = parse_ulybka(user_data['link'], message.from_user.id)

        # elif user_data['chosen_store'] == 'Hoff':
        #     pass
            # output_path = parse_hoff(user_data['link'], path)

        output_path = shutil.make_archive(result, 'zip', result)
        await types.ChatActions.upload_document()
        caption_text = "–ì–æ—Ç–æ–≤–æ! –°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∂–¥—É—Ç —Ç–µ–±—è –≤ –µ–¥–∏–Ω–æ–º –∞—Ä—Ö–∏–≤–µ\n\n" \
                       "P.S. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ Excel –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å —Ç—É—Ç: google.com"
        await message.answer_document(open(output_path, 'rb'), caption=caption_text)
        await cleaner('data_{}'.format(message.from_user.id))
    except:
        await cleaner('data_{}'.format(message.from_user.id))
        await message.answer("–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üò¢.\n–ü–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.")

    await cmd_idle(message, state)



def register_handlers_inquiry(dp: Dispatcher):
    dp.register_message_handler(inquiry_start, Text(equals="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"), state="*")
    dp.register_message_handler(inquiry_start, Text(equals="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É"), state="*")
    dp.register_message_handler(store_choice, content_types=ContentType.ANY, state=UserChoice.waiting_for_store)
    dp.register_message_handler(link_set, content_types=ContentType.ANY, state=UserChoice.waiting_for_link)
